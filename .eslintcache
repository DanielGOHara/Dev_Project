[{"B:\\Programming\\WebStorm Workspace\\dev_project\\src\\index.js":"1","B:\\Programming\\WebStorm Workspace\\dev_project\\src\\reportWebVitals.js":"2","B:\\Programming\\WebStorm Workspace\\dev_project\\src\\App.js":"3","B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\Slider.jsx":"4","B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\SortingAlgorithms\\sortingAlgorithms.js":"5","B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\SortingAlgorithms\\mergeSort.js":"6","B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\Speed.jsx":"7","B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\SortingAlgorithms\\quickSort.js":"8","B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\SortingAlgorithms\\heapSort.js":"9","B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\SortingAlgorithms\\bubbleSort.js":"10","B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\SortingAlgorithms\\cocktailSort.js":"11","B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\SortingAlgorithms\\insertionSort.js":"12","B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\SortingVisualiser.jsx":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":292,"mtime":1615487227053,"results":"17","hashOfConfig":"15"},{"size":3061,"mtime":1616982145808,"results":"18","hashOfConfig":"15"},{"size":1014,"mtime":1615481614543,"results":"19","hashOfConfig":"15"},{"size":3193,"mtime":1615461601972,"results":"20","hashOfConfig":"15"},{"size":2986,"mtime":1615542687861,"results":"21","hashOfConfig":"15"},{"size":1742,"mtime":1615462473530,"results":"22","hashOfConfig":"15"},{"size":1954,"mtime":1615479180711,"results":"23","hashOfConfig":"15"},{"size":930,"mtime":1615461601967,"results":"24","hashOfConfig":"15"},{"size":1584,"mtime":1615479307655,"results":"25","hashOfConfig":"15"},{"size":523,"mtime":1615582288609,"results":"26","hashOfConfig":"15"},{"size":12414,"mtime":1615582116148,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"mfxrdp",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},"B:\\Programming\\WebStorm Workspace\\dev_project\\src\\index.js",[],["56","57"],"B:\\Programming\\WebStorm Workspace\\dev_project\\src\\reportWebVitals.js",[],"B:\\Programming\\WebStorm Workspace\\dev_project\\src\\App.js",[],"B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\Slider.jsx",[],"B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\SortingAlgorithms\\sortingAlgorithms.js",[],"B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\SortingAlgorithms\\mergeSort.js",[],"B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\Speed.jsx",[],"B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\SortingAlgorithms\\quickSort.js",[],"B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\SortingAlgorithms\\heapSort.js",[],"B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\SortingAlgorithms\\bubbleSort.js",[],"B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\SortingAlgorithms\\cocktailSort.js",[],"B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\SortingAlgorithms\\insertionSort.js",[],"B:\\Programming\\WebStorm Workspace\\dev_project\\src\\SortingVisualizer\\SortingVisualiser.jsx",["58","59","60","61"],"import React from 'react';\r\nimport './SortingStyles.css';\r\nimport Slider from './Slider';\r\nimport Speed from './Speed';\r\nimport { getSortedAlgo } from \"./SortingAlgorithms/sortingAlgorithms\";\r\nimport { setSliderDisable } from \"./Slider\";\r\nimport { setSpeedDisable } from './Speed';\r\n\r\nlet arrayMax = 100, arrayMin = 20, tempMax = arrayMax, animationSpeed = 1, tempSpeed = animationSpeed, timeOutSpeed = 0;\r\nlet selectedAlgo = \"InsertionSort\";\r\n\r\nexport default class SortingVisualiser extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: [],\r\n      String: \"\",\r\n      isDisabled: false,\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n\r\n  /* When the app is opened this is called */\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n    this.timer();\r\n\r\n    // eslint-disable-next-line\r\n  }\r\n\r\n  /* Resets the chart array with a set of new random values, also inserts one 100 value */\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    let index = randomInt(arrayMin, arrayMax)\r\n    let count = 0;\r\n    for(let i = 0; i < arrayMax; i++) {\r\n      if(index === i) {\r\n        array.push(100);\r\n      } else {\r\n        array.push(randomInt(5, 100));\r\n      }\r\n    }\r\n\r\n    /* Checks to ensure at least one value is 100 */\r\n\r\n    for(let i = 0; i < array.length; i++) {\r\n      if(array[i] === 100) {\r\n        count++;\r\n      }\r\n    }\r\n    if(count === 0) {\r\n      index = randomInt(0, array.length - 1);\r\n      array[index] = 100;\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n  /* Updates the selectedAlgo variable */\r\n\r\n  updateAlgo(newAlgo) {\r\n    selectedAlgo = newAlgo;\r\n    this.setState({selectedAlgo});\r\n  }\r\n\r\n  /* Timer interval to consistently check in the updated value from the slider */\r\n\r\n  timer() {\r\n    setInterval(() => this.checkMax(), 5);\r\n  }\r\n\r\n  /* Compares arrayMax and tempMax, if they are different arrayMax is set to tempMax and resetArray is called */\r\n\r\n  checkMax() {\r\n    if(this.state.isDisabled === true) {\r\n    } else {\r\n      if (arrayMax !== tempMax) {\r\n        arrayMax = tempMax;\r\n        this.resetArray();\r\n      }\r\n      if (animationSpeed !== tempSpeed) {\r\n        animationSpeed = tempSpeed;\r\n      }\r\n    }\r\n    if(this.state.isDisabled === false) {\r\n      setSliderDisable(false);\r\n      setSpeedDisable(false);\r\n    }\r\n  }\r\n\r\n  /* Sorts algorithm, checks if a sorted array is already on screen and resets it if that is the case */\r\n\r\n  sort() {\r\n    setSliderDisable(true);\r\n    setSpeedDisable(true);\r\n    this.resetArray();\r\n    this.animateSorting(getSortedAlgo(selectedAlgo, this.state.array));\r\n  }\r\n\r\n  /* Disables all user control once the sort button is pressed and re-enables it after the array is sorted */\r\n\r\n  onChange() {\r\n    this.setState({isDisabled: true});\r\n    setTimeout(() => {\r\n      this.setState({isDisabled: false});\r\n    }, timeOutSpeed);\r\n  }\r\n\r\n  /* Takes the animations array and creates the animation on screen depending on the selected algorithm */\r\n\r\n  animateSorting(animations) {\r\n    console.log(animations);\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    let auxiliaryArray = [];\r\n\r\n    /* Animation for MergeSort */\r\n\r\n    if (selectedAlgo === \"MergeSort\") {\r\n      for (let i = 0; i < animations.length; i++) {\r\n        const isColourChange = i % 3 !== 2;\r\n        if (isColourChange) {\r\n          const [barOne, barTwo] = animations[i];\r\n          const barOneStyle = arrayBars[barOne].style;\r\n          const barTwoStyle = arrayBars[barTwo].style;\r\n          const colour = i % 3 === 0 ? 'red' : 'black';\r\n          timeOutSpeed = timeOutSpeed + i * animationSpeed;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = colour;\r\n            barTwoStyle.backgroundColor = colour;\r\n          }, i * animationSpeed);\r\n        } else {\r\n          setTimeout(() => {\r\n            const [barOne, newHeight] = animations[i];\r\n            const barOneStyle = arrayBars[barOne].style;\r\n            barOneStyle.height = `${newHeight}%`;\r\n          }, i * animationSpeed);\r\n        }\r\n        timeOutSpeed = i * animationSpeed;\r\n      }\r\n\r\n    /* Animation for QuickSort */\r\n\r\n    } else if (selectedAlgo === \"QuickSort\") {\r\n      for (let i = 0; i < animations.length; i++) {\r\n        const [barOne, barTwo, string] = animations[i];\r\n        if(animations[i].length > 3) {\r\n          auxiliaryArray = animations[i];\r\n        }\r\n        if (string === \"pivot\") {\r\n          const barOneStyle = arrayBars[barOne].style;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'yellow';\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = 'black'\r\n            }, i * animationSpeed / animations.length);\r\n          }, i * animationSpeed);\r\n        }\r\n        if (string === \"swap\" || string === \"pivot, right\") {\r\n          const valueOne = auxiliaryArray[barOne];\r\n          const valueTwo = auxiliaryArray[barTwo];\r\n          const barOneStyle = arrayBars[barOne].style;\r\n          const barTwoStyle = arrayBars[barTwo].style;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'red';\r\n            barTwoStyle.backgroundColor = 'red';\r\n            barOneStyle.height = `${valueTwo}%`;\r\n            barTwoStyle.height = `${valueOne}%`;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = 'black';\r\n              barTwoStyle.backgroundColor = 'black';\r\n            }, i * animationSpeed / animations.length);\r\n          }, i * animationSpeed);\r\n        }\r\n        timeOutSpeed = i * animationSpeed;\r\n      }\r\n\r\n    /* Animation for HeapSort, BubbleSort and CocktailSort */\r\n\r\n    } else if (selectedAlgo === \"HeapSort\" || selectedAlgo === \"BubbleSort\" || selectedAlgo === \"CocktailSort\") {\r\n      for (let i = 0; i < animations.length; i++) {\r\n        const [barOne, barTwo, string] = animations[i];\r\n        if (animations[i].length > 3) {\r\n          auxiliaryArray = animations[i];\r\n        }\r\n        if (string === \"swap\" || string === \"0, end\") {\r\n          const valueOne = auxiliaryArray[barOne];\r\n          const valueTwo = auxiliaryArray[barTwo];\r\n          const barOneStyle = arrayBars[barOne].style;\r\n          const barTwoStyle = arrayBars[barTwo].style;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'red';\r\n            barTwoStyle.backgroundColor = 'red';\r\n            barOneStyle.height = `${valueTwo}%`;\r\n            barTwoStyle.height = `${valueOne}%`;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = 'black';\r\n              barTwoStyle.backgroundColor = 'black';\r\n            }, i * animationSpeed / animations.length);\r\n          }, i * animationSpeed);\r\n        }\r\n        timeOutSpeed = i * animationSpeed;\r\n      }\r\n\r\n    /* Animation for InsertionSort */\r\n\r\n    } else if (selectedAlgo === \"InsertionSort\") {\r\n        for (let i = 0; i < animations.length; i++) {\r\n          const [barOne, barTwo, string] = animations[i];\r\n          if (animations[i].length > 3) {\r\n            auxiliaryArray = animations[i];\r\n          }\r\n          try {\r\n            if (string === \"swap\") {\r\n              const valueTwo = auxiliaryArray[barTwo];\r\n              const barOneStyle = arrayBars[barOne].style;\r\n              setTimeout(() => {\r\n                barOneStyle.backgroundColor = 'red';\r\n                barOneStyle.height = `${valueTwo}%`;\r\n                setTimeout(() => {\r\n                  barOneStyle.backgroundColor = 'black';\r\n                }, i * animationSpeed / animations.length);\r\n              }, i * animationSpeed);\r\n            }\r\n            timeOutSpeed = i * animationSpeed;\r\n          } catch {\r\n            console.log(\"| Error | BarOne: \" + barOne + \" BarTwo: \" + barTwo);\r\n          }\r\n        }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n\r\n    /* Sets the width depending on the arrays length */\r\n\r\n    const numWidth =\r\n      array.length < 30 ? 2.55 :\r\n        array.length < 40 ? 1.75 :\r\n          array.length < 50 ? 1.34 :\r\n            array.length < 75 ? 0.75 :\r\n              array.length < 100 ? 0.51:\r\n                array.length < 150 ? 0.37:\r\n                  array.length < 176 ? 0.36 : 2;\r\n    const width = `${numWidth}%`;\r\n\r\n    /* Sets the margin depending on the arrays length */\r\n\r\n    const numMargin =\r\n      array.length < 30 ? 4.5 :\r\n        array.length < 40 ? 4 :\r\n          array.length < 50 ? 3.5 :\r\n            array.length < 75 ? 3 :\r\n              array.length < 100 ? 2.5:\r\n                array.length < 150 ? 1.5:\r\n                  array.length < 176 ? 1 : 2;\r\n    const margin = `${numMargin}px`;\r\n\r\n    /* Reveals the bars value depending on the arrays length */\r\n\r\n    const color = array.length < 30 ? \"white\": \"transparent\";\r\n    return (\r\n      <>\r\n        <header className = \"header\">\r\n          <label id = \"title\">Daniel's Sorting Algorithm Visualiser</label>\r\n          <div className = \"speed-container\">\r\n            <label id = \"speed-title\">Sort Speed:</label><p id = \"speed-p\"><label id = \"speed-instructions\">(1 - Fastest, 100 - Slowest)</label></p><Speed/>\r\n          </div>\r\n          <button disabled = {this.state.isDisabled} onClick = {() => {this.sort(); this.onChange()}} id = \"sort-button\">Sort</button>\r\n          <label id = \"selected-container\">Currently Selected: <label id = \"selected-algorithm\">{selectedAlgo}</label></label>\r\n          <button disabled = {this.state.isDisabled} onClick = {() => this.resetArray()} id = \"new-array\">Generate New Array</button>\r\n          <div className = \"slider-container\">\r\n            <label>ArraySize: </label>\r\n            <Slider/>\r\n          </div>\r\n        </header>\r\n        <section className = \"array-container\">\r\n          {array.map((value, idx) => (\r\n            <div className = \"array-bar\" value = {value} key = {idx} style = {{height: `${value}%`, width: width, marginLeft: margin, marginRight: margin, color: color}}/>\r\n          ))}\r\n        </section>\r\n        <footer className = \"footer\">\r\n          <label id = \"footer-title\">Algorithms: </label>\r\n          <p id = \"footer-p\">\r\n            <button disabled = {this.state.isDisabled} onClick = {() => this.updateAlgo(\"MergeSort\")} id = \"mergeSort\">Merge Sort</button>\r\n            <button disabled = {this.state.isDisabled} onClick = {() => this.updateAlgo(\"QuickSort\")} id = \"quickSort\">Quick Sort</button>\r\n            <button disabled = {this.state.isDisabled} onClick = {() => this.updateAlgo(\"HeapSort\")} id = \"heapSort\">Heap Sort</button>\r\n            <button disabled = {this.state.isDisabled} onClick = {() => this.updateAlgo(\"BubbleSort\")} id = \"bubbleSort\">Bubble Sort</button>\r\n            <button disabled = {this.state.isDisabled} onClick = {() => this.updateAlgo(\"CocktailSort\")} id = \"cocktailSort\">Cocktail Sort</button>\r\n            <button disabled = {this.state.isDisabled} onClick = {() => this.updateAlgo(\"InsertionSort\")} id = \"insertionSort\">Insertion Sort</button>\r\n          </p>\r\n        </footer>\r\n        <label className = \"project-details\">Daniel O'Hara P2435725 De MontFort University Final Year Project 2021</label>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n/* Returns a random integer */\r\n\r\nfunction randomInt (min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n/* Compares the javascript sorted array to the algorithm sorted array */\r\n\r\n// eslint-disable-next-line\r\nfunction arraysAreEqual(sortedArray, stateArray) {\r\n  if(sortedArray.length !== stateArray.length) {\r\n    return false;\r\n  } else {\r\n    for(let i = 0; i < sortedArray.length; i++) {\r\n      if(sortedArray[i] !== stateArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/* Returns the arrayMax variable */\r\n\r\nexport function getArraySize() {\r\n  return arrayMax;\r\n}\r\n\r\n/* Checks incoming variable is within the array size limits and applies it */\r\n\r\nexport function setArraySize(newValue) {\r\n  if(newValue < arrayMin) {\r\n    tempMax = arrayMin;\r\n  } else if(newValue > 175) {\r\n    tempMax = 175;\r\n  } else {\r\n    tempMax = newValue;\r\n  }\r\n}\r\n\r\n/* Returns the animationSpeed variable */\r\n\r\nexport function getSpeed() {\r\n  return animationSpeed;\r\n}\r\n\r\n/* Checks incoming variable is within the speed limits and applies it */\r\n\r\nexport function setSpeed(newValue) {\r\n  if(newValue < 1) {\r\n    tempSpeed = 1;\r\n  } else if(newValue > 100) {\r\n    tempSpeed = 100;\r\n  } else {\r\n    tempSpeed = newValue;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":152,"column":22,"nodeType":"68","messageId":"69","endLine":157,"endColumn":12},{"ruleId":"66","severity":1,"message":"67","line":164,"column":22,"nodeType":"68","messageId":"69","endLine":173,"endColumn":12},{"ruleId":"66","severity":1,"message":"67","line":191,"column":22,"nodeType":"68","messageId":"69","endLine":200,"endColumn":12},{"ruleId":"66","severity":1,"message":"67","line":217,"column":26,"nodeType":"68","messageId":"69","endLine":223,"endColumn":16},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'animationSpeed'.","ArrowFunctionExpression","unsafeRefs","no-global-assign","no-unsafe-negation"]